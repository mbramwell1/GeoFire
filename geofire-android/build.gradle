apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'

def getRepositoryUsername() {
    return hasProperty('ossrhUsername') ? ossrhUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('ossrhPassword') ? ossrhPassword : ""
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.24.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.google.firebase:firebase-core:16.0.7'
    implementation('com.google.firebase:firebase-firestore:18.0.1') {
        exclude module: 'guava'
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            snapshotRepository(
                    url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.groupId = GROUP_ID
            pom.artifactId = ARTIFACT_ID
            pom.version = VERSION

            pom.project {
                name NAME
                packaging PACKAGING
                description DESCRIPTION
                url URL

                scm {
                    connection SCM_CONNECTION
                    developerConnection SCM_DEV_CONNECTION
                    url URL
                }

                licenses {
                    license {
                        name LICENSE
                        url LICENSE_URL
                        distribution LICENSE_DIST
                    }
                }

                developers {
                    developer {
                        id DEV_ID
                        name DEV_NAME
                        email DEV_EMAIL
                    }
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}
